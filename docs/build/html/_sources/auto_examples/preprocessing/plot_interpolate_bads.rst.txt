
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/preprocessing/plot_interpolate_bads.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_preprocessing_plot_interpolate_bads.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_preprocessing_plot_interpolate_bads.py:


====================
Plot and interpolate bads
====================

Use suggest_bads to automatically identify bad MEG channels
and use interpolate_bads based on the center of mass of the
sensors for bad channel correction.

.. GENERATED FROM PYTHON SOURCE LINES 10-28




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Opening raw data file /Users/praveen.sripad/nanna_data/mne_data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif...
        Read a total of 3 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
        Range : 25800 ... 192599 =     42.956 ...   320.670 secs
    Ready.
    Reading 0 ... 166799  =      0.000 ...   277.714 secs...
    epoch_length of 13 chosen
    Not setting metadata
    21 matching events found
    Setting baseline interval to [-6.500004268086219, 0.0] s
    Applying baseline correction (mode: mean)
    Created an SSP operator (subspace dimension = 3)
    3 projection items activated
    Using data from preloaded Raw for 21 events and 7809 original time points ...
    1 bad epochs dropped
        Using multitaper spectrum estimation with 7 DPSS windows
    Suggested bads [jumps]: ['MEG 1443', 'MEG 2313', 'MEG 1743', 'MEG 1032', 'MEG 2443']
    Suggested bads [unusual]: ['MEG 1332', 'MEG 2612']
    Suggested bads [dead]: []
    Suggested bad channels:  ['MEG 1443', 'MEG 2313', 'MEG 1743', 'MEG 2612', 'MEG 1032', 'EEG 053', 'MEG 1332', 'MEG 2443']
    >_interpolate_bads_meg\DBG> cog(sens) = [-0.00001  -0.00017   0.02427]
    >_interpolate_bads_meg\DBG> alt(sens) = [ 0.00000   0.01417  -0.01307]
    >_interpolate_bads_meg\DBG> cog(hdcs) = [-0.00916   0.00396   0.08851]
    >_interpolate_bads_meg\DBG> alt(hdcs) = [-0.00506   0.01182   0.04950]
    >_interpolate_bads_meg\DBG> calling _map_meg_channels(..., origin=(-0.00506   0.01182   0.04950))
    Computing interpolation matrix from 59 sensor positions
    Interpolating 1 sensors
        Computing dot products for 299 MEG channels...
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s finished
        Computing cross products for 299 â†’ 7 MEG channels...
        Preparing the mapping matrix...
        Truncating at 83/299 components to omit less than 0.0001 (0.0001)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>December 03, 2002  19:01:10 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>MEG</td>
        
        </tr>
            <th>Participant</th>
        
            <td>Unknown</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>146 points</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>204 Gradiometers, 102 Magnetometers, 9 Stimulus, 60 EEG, 1 EOG</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>EOG 061</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>600.61 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>0.10 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>172.18 Hz</td>
        </tr>
    
    
        <tr>
            <th>Projections</th>
            <td>PCA-v1 : off<br/>PCA-v2 : off<br/>PCA-v3 : off</td>
        </tr>
    
    
        <tr>
            <th>Filenames</th>
            <td>sample_audvis_raw.fif</td>
        </tr>
    
        <tr>
            <th>Duration</th>
            <td>00:04:38 (HH:MM:SS)</td>
        </tr>
    </table>
    </div>
    <br />
    <br />



|

.. code-block:: default


    import os.path as op

    import mne
    from mne.datasets import sample
    from jumeg import suggest_bads
    from jumeg import interpolate_bads

    data_path = sample.data_path()
    subjects_dir = op.join(data_path, 'subjects')

    raw_fname = op.join(data_path, 'MEG/sample/sample_audvis_raw.fif')

    raw = mne.io.Raw(raw_fname, preload=True)
    mybads, raw = suggest_bads(raw, show_raw=False, summary_plot=False)

    # origin = None causes the method to use the sensor center of mass as origin
    interpolate_bads(raw, origin=None, reset_bads=True)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.194 seconds)


.. _sphx_glr_download_auto_examples_preprocessing_plot_interpolate_bads.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_interpolate_bads.py <plot_interpolate_bads.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_interpolate_bads.ipynb <plot_interpolate_bads.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
